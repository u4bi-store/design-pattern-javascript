/* 자바스크립트에서는 함수 내 여기저기서
 	 여러개의 var 선언을 사용할 수 있지만
   실제로는 모두 함수 상단에서 변수가 선언된 것과 동일하게 동작함.
   
   이러한 동작 방식을 호이스팅 끌어올리기라고 함.
   때문에 함수 안에서 변수를 사용한 다음에
   
   선언하면 로직상의 오류를 일으킬 수 있음.
   
   예로 자바스크립트는 동일한 유호범위 즉 동일한 함수 안에 있는 변수는 var 선언 전에 사용해도
   이미 선언된 것으로 간주한다고 함.
*/

// 안티패턴
global = 'u4bi'; /* 전역 변수 */

function func(){
  alert(global); /* undefined */
  
  var global = 'local';
  alert(global); /* local*/
}
/* 이 예제를 보면 첫번째 alert()의 결과로 u4bi가 출력되고
   두번째에는 local이 출력될거라고 예상하기 쉬움
   
   그러나 실제 동작은 그렇지 않음.
   첫번째 alert은 undefined를 출력함
   
   global 변수가 이 함수의 지역 변수로 선언되었다고 간주하기 때문임.   
   선언문 자체가 그 다음에 나온다 해도 말이다.
   
   모든 변수 선언문은 함수 상단으로 끌어올려진다고 함.
   이러한 혼란을 피하기 위해서는
   사용할 변수를 모두 맨 첫 줄에 선언하는 것이 좋음.
*/


/* 아래의 함수도 위의 함수와 동일하게 동작함
*/
global = 'u4bi'; /* 전역 변수 */
function func(){
  var global;
  /* var global;은 var global = undefined; 위처럼 쓴거와 동일함. */
  alert(global); /* undefined */
  
  global = 'local';
  alert(global); /* local*/
}


/*
  코드는 두 단계를 거쳐 처리됨
  
  첫번째 단계
  			변수 함수선언 형식 매개변수들이 생성
        코드를 파싱하고 실행 문맥으로 들어감
  두번째 단계
  			런타임 코드 실행 단계임
        함수 표현식과
        지정되지 않은 식별자 즉 선언되지 않은 변수들이 생성 됨
*/